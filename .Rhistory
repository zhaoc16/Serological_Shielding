source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/utils.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/input.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/run_main.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/run_main.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/run_main.R')
Deaths
model_out
model_out[, pars_doNothing$D_ids]
rowSums(model_out[, pars_doNothing$D_ids])
PARS
pars
require(MCMCpack)
setwd('/Users/czhao/Documents/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/')
source('CYZ_reorg/R/input_SD_Simulations.R')
# Get Pars
pars_doNothing = pars_default
pars_doNothing[['socialDistancing_other']]=0.25
pars_doNothing[['socialDistancing_other_c']]=0.25
pars_doNothing[['p_reduced']]=0.1
pars_doNothing[['p_reduced_c']]=0.1
pars_doNothing[['daily_tests']]=0
pars_doNothing[['tStart_distancing']]=500
pars_doNothing[['tStart_test']]=500
pars_doNothing[['tStart_target']]=500
pars_doNothing[['tStart_school']]=500
pars_doNothing[['tStart_reopen']]=500
# Run Model
model_out = ode(y = X0
, times = pars_doNothing$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars_doNothing
, method='ode45')
model_out = as.data.frame(model_out)[,-1]
Y = rowSums(model_out[, pars_doNothing$D_ids])
pars
pars_default
pars$R0
pars_default$R0
pars$Q
pars_default$q
##  negative binomial regression with an improper unform prior
## X and y are passed as args to MCMCmetrop1R
negbinfun = function(theta, y, X){
pars = pars_default
pars[['R0']] = theta[0]
pars[['q']] = theta[1]
model_out = ode(y = X0
, times = pars$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars
, method='ode45')
y_out = rowSums(model_out[, pars$D_ids])
log_like = sum((y-y_out)^2)/2
}
post.samp = MCMCmetrop1R(negbinfun
, theta.init=c(0,0)
, y=yy
, X=XX
, thin=1
, mcmc=200
, burnin=100
, tune=1.5
, verbose=50
, logfun=TRUE
, seed=list(NA,1))
##  negative binomial regression with an improper unform prior
## X and y are passed as args to MCMCmetrop1R
negbinfun = function(theta, y=y_base, X){
pars = pars_default
pars[['R0']] = theta[0]
pars[['q']] = theta[1]
model_out = ode(y = X0
, times = pars$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars
, method='ode45')
y_out = rowSums(model_out[, pars$D_ids])
log_like = sum((y-y_out)^2)/2
}
n = 1000
x1 = rnorm(n)
x2 = rnorm(n)
XX = cbind(1,x1,x2)
mu = exp(1.5+x1+2*x2)*rgamma(n,1)
yy = rpois(n, mu)
post.samp = MCMCmetrop1R(negbinfun
, theta.init=c(0,0)
, y=yy
, X=XX
, thin=1
, mcmc=200
, burnin=100
, tune=1.5
, verbose=50
, logfun=TRUE
, seed=list(NA,1))
post.samp = MCMCmetrop1R(negbinfun
, theta.init=c(2.9,0.1)
, y=yy
, X=XX
, thin=1
, mcmc=200
, burnin=100
, tune=1.5
, verbose=5
, logfun=TRUE
, seed=list(NA,1))
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
negbinfun = function(theta, y=y_base, X){
pars = pars_default
pars[['R0']] = theta[0]
pars[['q']] = theta[1]
model_out = ode(y = X
, times = pars$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars
, method='ode45')
y_out = rowSums(model_out[, pars$D_ids])
log_like = sum((y-y_out)^2)/2
}
post.samp = MCMCmetrop1R(negbinfun
, theta.init=c(2.9,0.1)
, y=y_base
, X=X0
, thin=1
, mcmc=200
, burnin=100
, tune=1.5
, verbose=5
, logfun=TRUE
, seed=list(NA,1))
negbinfun = function(theta, y=y_base, X){
print('hi')
pars = pars_default
pars[['R0']] = theta[0]
pars[['q']] = theta[1]
model_out = ode(y = X
, times = pars$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars
, method='ode45')
y_out = rowSums(model_out[, pars$D_ids])
log_like = sum((y-y_out)^2)/2
}
post.samp = MCMCmetrop1R(negbinfun
, theta.init=c(2.9,0.1)
, y=y_base
, X=X0
, thin=1
, mcmc=200
, burnin=100
, tune=0.1
, verbose=1
, logfun=TRUE
, seed=list(NA,1))
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
pars_default
seir_err = function(theta, y=y_base, X){
pars = pars_default
pars[['R0']] = theta[0]
pars[['q']] = theta[1]
model_out = ode(y = X
, times = pars$times
, fun = seir_model_shields_rcfc_nolatent
, parms = pars
, method='ode45')
y_out = rowSums(model_out[, pars$D_ids])/pars$N
log_like = sum((y-y_out)^2)/2
print(log_like)
return(log_like)
}
post.samp = MCMCmetrop1R(seir_err
, theta.init=c(0.1,0.1)
, y=y_base
, X=X0
, thin=1
, mcmc=200
, burnin=100
, tune=0.1
, verbose=5
, logfun=TRUE
, seed=list(NA,1))
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/CYZ_reorg/R/test_mcmcmetrop1r.R')
