HighContact_Work[,2]<-WorkContacts_5x5[,2]*FracReleased[2]
HighContact_Work[,3]<-WorkContacts_5x5[,3]*FracReleased[3]
HighContact_Work[,4]<-WorkContacts_5x5[,4]*FracReleased[4]
HighContact_Work[,5]<-WorkContacts_5x5[,5]*FracReleased[5]
LowContact_Work<-matrix(0, ncol=5, nrow=5)
LowContact_Work[,1]<-WorkContacts_5x5[,1]*FracDistanced[1]
LowContact_Work[,2]<-WorkContacts_5x5[,2]*FracDistanced[2]
LowContact_Work[,3]<-WorkContacts_5x5[,3]*FracDistanced[3]
LowContact_Work[,4]<-WorkContacts_5x5[,4]*FracDistanced[4]
LowContact_Work[,5]<-WorkContacts_5x5[,5]*FracDistanced[5]
WorkContacts_10x10_Baseline<-matrix(0, ncol=10, nrow=10)
for(i in 1:10){
rowfind<-c(rep(1:5, each=2))
WorkVec<-c(HighContact_Work[rowfind[i],1], LowContact_Work[rowfind[i],1],
HighContact_Work[rowfind[i],2], LowContact_Work[rowfind[i],2],
HighContact_Work[rowfind[i],3], LowContact_Work[rowfind[i],3],
HighContact_Work[rowfind[i],4], LowContact_Work[rowfind[i],4],
HighContact_Work[rowfind[i],5], LowContact_Work[rowfind[i],5])
WorkContacts_10x10_Baseline[i,]<-WorkVec
}
#Broad distancing matrix
WorkContacts_10x10_Distancing<-matrix(0, ncol=10, nrow=10)
#Children have no work contacts
#Non-essential workers don't work
#Reduced contact workers reduce contacts by preduced and those contacts are proportional to
#prevalence in the population
WorkContacts_10x10_Distancing[5,]<-c(WorkContacts_5x5[3,1]*FracReleased[1]*preduced,
WorkContacts_5x5[3,1]*FracDistanced[1]*preduced,
WorkContacts_5x5[3,2]*FracReleased[2]*preduced, WorkContacts_5x5[3,2]*FracDistanced[2]*preduced,
WorkContacts_5x5[3,3]*FracReleased[3]*preduced, WorkContacts_5x5[3,3]*FracDistanced[3]*preduced,
WorkContacts_5x5[3,4]*FracReleased[4]*preduced, WorkContacts_5x5[3,4]*FracDistanced[4]*preduced,
WorkContacts_5x5[3,5]*FracReleased[5]*preduced, WorkContacts_5x5[3,5]*FracDistanced[5]*preduced)
WorkContacts_10x10_Distancing[6,]<-WorkContacts_10x10_Distancing[5,]
#Full contact workers keep all of their baseline contacts
#The distribution of those contacts is based on prevalence in the population
WorkContacts_10x10_Distancing[7,]<-c(WorkContacts_5x5[4,1]*FracReleased[1]*pfull, WorkContacts_5x5[4,1]*FracDistanced[1]*pfull,
WorkContacts_5x5[4,2]*FracReleased[2]*pfull, WorkContacts_5x5[3,2]*FracDistanced[2]*pfull,
WorkContacts_5x5[4,3]*FracReleased[3]*pfull, WorkContacts_5x5[3,3]*FracDistanced[3]*pfull,
WorkContacts_5x5[4,4]*FracReleased[4]*pfull, WorkContacts_5x5[3,4]*FracDistanced[4]*pfull,
WorkContacts_5x5[4,5]*FracReleased[5]*pfull, WorkContacts_5x5[3,5]*FracDistanced[5]*pfull)
WorkContacts_10x10_Distancing[8,]<-WorkContacts_10x10_Distancing[7,]
#Targeted distancing work
#DISTANCING CONDITIONAL ON TESTING: People working from home regain their workplace contacts if they test positive
#People in reduced and full contact occupations have the distribution of their workplace contacts changed by alpha
WorkContacts_10x10_TargetedDistancing<-matrix(0, nrow=10, ncol=10)
WorkContacts_10x10_TargetedDistancing[3,]<-c(WorkContacts_5x5[2,1], 0, WorkContacts_5x5[2,2], 0, WorkContacts_5x5[2,3], 0,
WorkContacts_5x5[2,4], 0, WorkContacts_5x5[2,5], 0)
#We use fixed shielding (except we multiply by alpha and not alpha +1),
#so we correct for the situation where alpha times prevalence is greater than 1
Scale<-numeric(5)
Scale<-FracReleased*alpha
for(i in 1:5){
if(Scale[i]>1){Scale[i]<-1}
}
WorkContacts_10x10_TargetedDistancing[1,]<-c(rep(0, 10))
DistancedWork_RedContact<-WorkContacts_10x10_Baseline[5,]*preduced2
WorkContacts_10x10_TargetedDistancing[5,1]<-sum(DistancedWork_RedContact[1], DistancedWork_RedContact[2])*Scale[1]
WorkContacts_10x10_TargetedDistancing[5,2]<-sum(DistancedWork_RedContact[1], DistancedWork_RedContact[2])*(1-Scale[1])
WorkContacts_10x10_TargetedDistancing[5,3]<-sum(DistancedWork_RedContact[3], DistancedWork_RedContact[4])*Scale[2]
WorkContacts_10x10_TargetedDistancing[5,4]<-sum(DistancedWork_RedContact[3], DistancedWork_RedContact[4])*(1-Scale[2])
WorkContacts_10x10_TargetedDistancing[5,5]<-sum(DistancedWork_RedContact[5], DistancedWork_RedContact[6])*Scale[3]
WorkContacts_10x10_TargetedDistancing[5,6]<-sum(DistancedWork_RedContact[5], DistancedWork_RedContact[6])*(1-Scale[3])
WorkContacts_10x10_TargetedDistancing[5,7]<-sum(DistancedWork_RedContact[7], DistancedWork_RedContact[8])*Scale[4]
WorkContacts_10x10_TargetedDistancing[5,8]<-sum(DistancedWork_RedContact[7], DistancedWork_RedContact[8])*(1-Scale[4])
WorkContacts_10x10_TargetedDistancing[5,9]<-sum(DistancedWork_RedContact[9], DistancedWork_RedContact[10])*Scale[5]
WorkContacts_10x10_TargetedDistancing[5,10]<-sum(DistancedWork_RedContact[9], DistancedWork_RedContact[10])*(1-Scale[5])
WorkContacts_10x10_TargetedDistancing[6,]<-WorkContacts_10x10_TargetedDistancing[5,]
WorkContacts_10x10_TargetedDistancing[7,]<-WorkContacts_10x10_TargetedDistancing[5,]/preduced2
WorkContacts_10x10_TargetedDistancing[8,]<-WorkContacts_10x10_TargetedDistancing[5,]/preduced2
##Other contacts
#BASELINE OTHER CONTACTS MATRIX: People mix freely, contacts are based on proportion in the
#population
HighContact_Other<-matrix(0, ncol=5, nrow=5)
HighContact_Other[,1]<-OtherContacts_5x5[,1]*FracReleased[1]
HighContact_Other[,2]<-OtherContacts_5x5[,2]*FracReleased[2]
HighContact_Other[,3]<-OtherContacts_5x5[,3]*FracReleased[3]
HighContact_Other[,4]<-OtherContacts_5x5[,4]*FracReleased[4]
HighContact_Other[,5]<-OtherContacts_5x5[,5]*FracReleased[5]
LowContact_Other<-matrix(0, ncol=5, nrow=5)
LowContact_Other[,1]<-OtherContacts_5x5[,1]*FracDistanced[1]
LowContact_Other[,2]<-OtherContacts_5x5[,2]*FracDistanced[2]
LowContact_Other[,3]<-OtherContacts_5x5[,3]*FracDistanced[3]
LowContact_Other[,4]<-OtherContacts_5x5[,4]*FracDistanced[4]
LowContact_Other[,5]<-OtherContacts_5x5[,5]*FracDistanced[5]
OtherContacts_10x10_Baseline<-matrix(0, ncol=10, nrow=10)
for(i in 1:10){
rowfind<-c(rep(1:5, each=2))
OtherVec<-c(HighContact_Other[rowfind[i],1], LowContact_Other[rowfind[i], 1],
HighContact_Other[rowfind[i],2], LowContact_Other[rowfind[i],2],
HighContact_Other[rowfind[i],3], LowContact_Other[rowfind[i],3],
HighContact_Other[rowfind[i],4], LowContact_Other[rowfind[i],4],
HighContact_Other[rowfind[i],5], LowContact_Other[rowfind[i],5])
OtherContacts_10x10_Baseline[i,]<-OtherVec
}
#UNTARGETED SOCIAL DISTANCING OTHER CONTACTS: All contacts for social distancing are reduced by
#a fraction
OtherContacts_10x10_Distancing<-OtherContacts_10x10_Baseline*sd.other
#TARGETED SOCIAL DISTANCING OTHER CONTACTS: Shielding
#Contact probabilities proportional to prevalence in the population times a scaling factor to account for shielding
#Keep the total contacts the same by subtracting from the total number of expected contacts between age classes
#Once the scaling factor*prevalence exceeds 1, set to 1 (so that all contacts are with a positive individual)
OtherContacts_10x10_TargetedDistancing<-matrix(0, nrow=10, ncol=10)
for(i in 1:5){
for(j in 1:5){
EvenVec<-c(2, 4, 6, 8, 10)
OddVec<-c(1,3,5,7,9)
#Odd rows
OtherContacts_10x10_TargetedDistancing[2*i-1,OddVec[j]]<-OtherContacts_5x5[i,j]*sd.other2*Scale[j]
OtherContacts_10x10_TargetedDistancing[2*i-1,EvenVec[j]]<-OtherContacts_5x5[i,j]*sd.other2*(1-Scale[j])
#Even rows
OtherContacts_10x10_TargetedDistancing[2*i,OddVec[j]]<-OtherContacts_5x5[i,j]*sd.other2*Scale[j]
OtherContacts_10x10_TargetedDistancing[2*i,EvenVec[j]]<-OtherContacts_5x5[i,j]*sd.other2*(1-Scale[j])
}
}
#For test positive individuals, keep the distribution of other contacts shielded but change the number to pre-pandemic levels
OtherContacts_10x10_TargetedDistancing2<-OtherContacts_10x10_TargetedDistancing
OtherContacts_10x10_TargetedDistancing2[1,]<-OtherContacts_10x10_TargetedDistancing[1,]*(1/sd.other2)
OtherContacts_10x10_TargetedDistancing2[3,]<-OtherContacts_10x10_TargetedDistancing[3,]*(1/sd.other2)
OtherContacts_10x10_TargetedDistancing2[5,]<-OtherContacts_10x10_TargetedDistancing[5,]*(1/sd.other2)
OtherContacts_10x10_TargetedDistancing2[7,]<-OtherContacts_10x10_TargetedDistancing[7,]*(1/sd.other2)
OtherContacts_10x10_TargetedDistancing2[9,]<-OtherContacts_10x10_TargetedDistancing[9,]*(1/sd.other2)
#Change matrices used over time
if(t<start.time.distance | t>=time.reopen){ #Use baseline matrices until social distancing starts
CM<-HomeContacts_10x10+SchoolContacts_10x10_Baseline+WorkContacts_10x10_Baseline+
OtherContacts_10x10_Baseline
}
if(t>=start.time.distance & t<time.reopen){ #Use this line if changing between distancing scenarios
#if(t>=start.time.distance & t<start.time.target){ #Use these matrices under general social distancing without testing
CM<-HomeContacts_10x10 + WorkContacts_10x10_Distancing + OtherContacts_10x10_Distancing
}
if(t>=start.time.target & t<school.start.time){ #Use these matrices between the start of targeting and schools reopening
CM<-HomeContacts_10x10 + WorkContacts_10x10_TargetedDistancing +
OtherContacts_10x10_TargetedDistancing2}
if(t>=school.start.time){ #Keep most matrices the same but add schools back in
CM<-HomeContacts_10x10 + WorkContacts_10x10_TargetedDistancing +
OtherContacts_10x10_TargetedDistancing2+SchoolContacts_10x10_Baseline
}
#Force of infection by group
#Children
foi.c.pos = q*((CM[1,1]*infec.c.pos/(tot.c.pos)) + (CM[1,2]*infec.c.gen/(tot.c.gen))+
(CM[1,3]*infec.a.pos/(tot.a.pos)) + (CM[1,4]*infec.a.gen/(tot.a.gen))+
(CM[1,5]*infec.rc.pos/(tot.rc.pos)) + (CM[1,6]*infec.rc.gen/(tot.rc.gen))+
(CM[1,7]*infec.fc.pos/(tot.fc.pos)) + (CM[1,8]*infec.fc.gen/(tot.fc.gen))+
(CM[1,9]*infec.e.pos/(tot.e.pos)) + (CM[1,10]*infec.e.gen/(tot.e.gen)))
foi.c.gen = q*((CM[2,1]*infec.c.pos/(tot.c.pos)) + (CM[2,2]*infec.c.gen/(tot.c.gen))+
(CM[2,3]*infec.a.pos/(tot.a.pos)) + (CM[2,4]*infec.a.gen/(tot.a.gen))+
(CM[2,5]*infec.rc.pos/(tot.rc.pos)) + (CM[2,6]*infec.rc.gen/(tot.rc.gen))+
(CM[2,7]*infec.fc.pos/(tot.fc.pos)) + (CM[2,8]*infec.fc.gen/(tot.fc.gen))+
(CM[2,9]*infec.e.pos/(tot.e.pos)) + (CM[2,10]*infec.e.gen/(tot.e.gen)))
#Homebound adults
foi.a.pos = q*((CM[3,1]*infec.c.pos/(tot.c.pos)) + (CM[3,2]*infec.c.gen/(tot.c.gen))+
(CM[3,3]*infec.a.pos/(tot.a.pos)) + (CM[3,4]*infec.a.gen/(tot.a.gen))+
(CM[3,5]*infec.rc.pos/(tot.rc.pos)) + (CM[3,6]*infec.rc.gen/(tot.rc.gen))+
(CM[3,7]*infec.fc.pos/(tot.fc.pos)) + (CM[3,8]*infec.fc.gen/(tot.fc.gen))+
(CM[3,9]*infec.e.pos/(tot.e.pos)) + (CM[3,10]*infec.e.gen/(tot.e.gen)))
foi.a.gen = q*((CM[4,1]*infec.c.pos/(tot.c.pos)) + (CM[4,2]*infec.c.gen/(tot.c.gen))+
(CM[4,3]*infec.a.pos/(tot.a.pos)) + (CM[4,4]*infec.a.gen/(tot.a.gen))+
(CM[4,5]*infec.rc.pos/(tot.rc.pos)) + (CM[4,6]*infec.rc.gen/(tot.rc.gen))+
(CM[4,7]*infec.fc.pos/(tot.fc.pos)) + (CM[4,8]*infec.fc.gen/(tot.fc.gen))+
(CM[4,9]*infec.e.pos/(tot.e.pos)) + (CM[4,10]*infec.e.gen/(tot.e.gen)))
#Reduced contact adults
foi.rc.pos = q*((CM[5,1]*infec.c.pos/(tot.c.pos)) + (CM[5,2]*infec.c.gen/(tot.c.gen))+
(CM[5,3]*infec.a.pos/(tot.a.pos)) + (CM[5,4]*infec.a.gen/(tot.a.gen))+
(CM[5,5]*infec.rc.pos/(tot.rc.pos)) + (CM[5,6]*infec.rc.gen/(tot.rc.gen))+
(CM[5,7]*infec.fc.pos/(tot.fc.pos)) + (CM[5,8]*infec.fc.gen/(tot.fc.gen))+
(CM[5,9]*infec.e.pos/(tot.e.pos)) + (CM[5,10]*infec.e.gen/(tot.e.gen)))
foi.rc.gen = q*((CM[6,1]*infec.c.pos/(tot.c.pos)) + (CM[6,2]*infec.c.gen/(tot.c.gen))+
(CM[6,3]*infec.a.pos/(tot.a.pos)) + (CM[6,4]*infec.a.gen/(tot.a.gen))+
(CM[6,5]*infec.rc.pos/(tot.rc.pos)) + (CM[6,6]*infec.rc.gen/(tot.rc.gen))+
(CM[6,7]*infec.fc.pos/(tot.fc.pos)) + (CM[6,8]*infec.fc.gen/(tot.fc.gen))+
(CM[6,9]*infec.e.pos/(tot.e.pos)) + (CM[6,10]*infec.e.gen/(tot.e.gen)))
#Full contact adults
foi.fc.pos = q*((CM[7,1]*infec.c.pos/(tot.c.pos)) + (CM[7,2]*infec.c.gen/(tot.c.gen))+
(CM[7,3]*infec.a.pos/(tot.a.pos)) + (CM[7,4]*infec.a.gen/(tot.a.gen))+
(CM[7,5]*infec.rc.pos/(tot.rc.pos)) + (CM[7,6]*infec.rc.gen/(tot.rc.gen))+
(CM[7,7]*infec.fc.pos/(tot.fc.pos)) + (CM[7,8]*infec.fc.gen/(tot.fc.gen))+
(CM[7,9]*infec.e.pos/(tot.e.pos)) + (CM[7,10]*infec.e.gen/(tot.e.gen)))
foi.fc.gen = q*((CM[8,1]*infec.c.pos/(tot.c.pos)) + (CM[8,2]*infec.c.gen/(tot.c.gen))+
(CM[8,3]*infec.a.pos/(tot.a.pos)) + (CM[8,4]*infec.a.gen/(tot.a.gen))+
(CM[8,5]*infec.rc.pos/(tot.rc.pos)) + (CM[8,6]*infec.rc.gen/(tot.rc.gen))+
(CM[8,7]*infec.fc.pos/(tot.fc.pos)) + (CM[8,8]*infec.fc.gen/(tot.fc.gen))+
(CM[8,9]*infec.e.pos/(tot.e.pos)) + (CM[8,10]*infec.e.gen/(tot.e.gen)))
#Elderly
foi.e.pos = q*((CM[9,1]*infec.c.pos/(tot.c.pos)) + (CM[9,2]*infec.c.gen/(tot.c.gen))+
(CM[9,3]*infec.a.pos/(tot.a.pos)) + (CM[9,4]*infec.a.gen/(tot.a.gen))+
(CM[9,5]*infec.rc.pos/(tot.rc.pos)) + (CM[9,6]*infec.rc.gen/(tot.rc.gen))+
(CM[9,7]*infec.fc.pos/(tot.fc.pos)) + (CM[9,8]*infec.fc.gen/(tot.fc.gen))+
(CM[9,9]*infec.e.pos/(tot.e.pos)) + (CM[9,10]*infec.e.gen/(tot.e.gen)))
foi.e.gen = q*((CM[10,1]*infec.c.pos/(tot.c.pos)) + (CM[10,2]*infec.c.gen/(tot.c.gen))+
(CM[10,3]*infec.a.pos/(tot.a.pos)) + (CM[10,4]*infec.a.gen/(tot.a.gen))+
(CM[10,5]*infec.rc.pos/(tot.rc.pos)) + (CM[10,6]*infec.rc.gen/(tot.rc.gen))+
(CM[10,7]*infec.fc.pos/(tot.fc.pos)) + (CM[10,8]*infec.fc.gen/(tot.fc.gen))+
(CM[10,9]*infec.e.pos/(tot.e.pos)) + (CM[10,10]*infec.e.gen/(tot.e.gen)))
#Testing
#Get number of tests available by group
child.tests<-daily.tests*agestruc[1]
adult.tests.h<-daily.tests*agestruc[2]*prob.home
adult.tests.rc<-daily.tests*agestruc[2]*prob.reduced
adult.tests.fc<-daily.tests*agestruc[2]*prob.full
el.tests<-daily.tests*agestruc[3]
#Divide by number of people eligible to be tested to get proportion tested per day
test.c<-child.tests/sum(S.c, E.c, Ia.c, Hs.c, Hc.c, R.c)
if(test.c>1){test.c<-1} #When prevalence and testing are high, might not be enough people eligible to be tested so correct this here
test.a<-adult.tests.h/sum(S.a, E.a, Ia.a, Hs.a, Hc.a, R.a)
if(test.a>1){test.a<-1}
test.rc<-adult.tests.rc/sum(S.rc, E.rc, Ia.rc, Hs.rc, Hc.rc, R.rc)
if(test.rc>1){test.rc<-1}
test.fc<-adult.tests.fc/sum(S.fc, E.fc, Ia.fc, Hs.fc, Hc.fc, R.fc)
if(test.fc>1){test.fc<-1}
test.e<-el.tests/sum(S.e, E.e, Ia.e, Hs.e, Hc.e, R.e)
if(test.e>1){test.e<-1}
#Model equations
dS.c = - foi.c.gen*S.c - (1-specificity)*test.c*test.switch2*S.c
dE.c = foi.c.gen*S.c - gamma_e*E.c - (1-specificity)*test.c*test.switch2*E.c
dIs.c = gamma_e*E.c*p - gamma_s*Is.c
dIa.c = gamma_e*E.c*(1-p) - gamma_a*Ia.c - (1-specificity)*test.c*test.switch2*Ia.c
dHs.c = gamma_s*Is.c*(hosp_frac[1]-hosp_crit[1]) + gamma_s*Is.c.pos*(hosp_frac[1]-hosp_crit[1]) - gamma_hs*Hs.c
dHc.c = gamma_s*Is.c*hosp_crit[1] + gamma_s*Is.c.pos*hosp_crit[1]- gamma_hc*Hc.c
dD.c = gamma_hc*Hc.c*crit_die[1]
dR.c = (1-hosp_frac[1])*gamma_s*Is.c + gamma_a*Ia.c + (1-sensitivity)*test.switch2*gamma_hs*Hs.c +
(1-sensitivity)*gamma_hc*test.switch2*Hc.c*(1-crit_die[1])  - sensitivity*test.c*test.switch2*R.c+
gamma_hc*test.switch1*Hc.c*(1-crit_die[1])+test.switch1*gamma_hs*Hs.c
dS.c.pos = (1-specificity)*test.c*test.switch2*S.c - foi.c.pos*S.c.pos
dE.c.pos = (1-specificity)*test.c*test.switch2*E.c + foi.c.pos*S.c.pos - gamma_e*E.c.pos
dIs.c.pos = gamma_e*E.c.pos*p - gamma_s*Is.c.pos
dIa.c.pos = (1-specificity)*test.c*test.switch2*Ia.c + gamma_e*E.c.pos*(1-p) - gamma_a*Ia.c.pos
dR.c.pos = sensitivity*test.c*test.switch2*R.c + sensitivity*gamma_hc*test.switch2*Hc.c*(1-crit_die[1]) + sensitivity*gamma_hs*test.switch2*Hs.c +
(1-hosp_frac[1])*gamma_s*Is.c.pos + gamma_a*Ia.c.pos
dS.a = - foi.a.gen*S.a - (1-specificity)*test.a*test.switch2*S.a
dE.a = foi.a.gen*S.a - gamma_e*E.a - (1-specificity)*test.a*test.switch2*E.a
dIs.a = gamma_e*E.a*p - gamma_s*Is.a
dIa.a = gamma_e*E.a*(1-p) - gamma_a*Ia.a - (1-specificity)*test.a*test.switch2*Ia.a
dHs.a = gamma_s*Is.a*(hosp_frac[2]-hosp_crit[2]) + gamma_s*Is.a.pos*(hosp_frac[2]-hosp_crit[2]) - gamma_hs*Hs.a
dHc.a = gamma_s*Is.a*hosp_crit[2] + gamma_s*Is.a.pos*hosp_crit[2] - gamma_hc*Hc.a
dD.a = gamma_hc*Hc.a*crit_die[2]
dR.a = (1-hosp_frac[2])*gamma_s*Is.a + gamma_a*Ia.a + (1-sensitivity)*test.switch2*gamma_hs*Hs.a +
(1-sensitivity)*test.switch2*gamma_hc*Hc.a*(1-crit_die[2])  - sensitivity*test.a*test.switch2*R.a+
gamma_hc*test.switch1*Hc.a*(1-crit_die[2])+test.switch1*gamma_hs*Hs.a
dS.a.pos = (1-specificity)*test.a*test.switch2*S.a - foi.a.pos*S.a.pos
dE.a.pos = (1-specificity)*test.a*test.switch2*E.a + foi.a.pos*S.a.pos - gamma_e*E.a.pos
dIs.a.pos = gamma_e*E.a.pos*p - gamma_s*Is.a.pos
dIa.a.pos = (1-specificity)*test.a*test.switch2*Ia.a + gamma_e*E.a.pos*(1-p) - gamma_a*Ia.a.pos
dR.a.pos = sensitivity*test.a*test.switch2*R.a + sensitivity*test.switch2*gamma_hc*Hc.a*(1-crit_die[2]) + sensitivity*test.switch2*gamma_hs*Hs.a +
(1-hosp_frac[2])*gamma_s*Is.a.pos + gamma_a*Ia.a.pos
dS.rc = - foi.rc.gen*S.rc - (1-specificity)*test.rc*test.switch2*S.rc
dE.rc = foi.rc.gen*S.rc - gamma_e*E.rc - (1-specificity)*test.rc*test.switch2*E.rc
dIs.rc = gamma_e*E.rc*p - gamma_s*Is.rc
dIa.rc = gamma_e*E.rc*(1-p) - gamma_a*Ia.rc - (1-specificity)*test.rc*test.switch2*Ia.rc
dHs.rc = gamma_s*Is.rc*(hosp_frac[2]-hosp_crit[2]) + gamma_s*Is.rc.pos*(hosp_frac[2]-hosp_crit[2]) - gamma_hs*Hs.rc
dHc.rc = gamma_s*Is.rc*hosp_crit[2] + gamma_s*Is.rc.pos*hosp_crit[2]- gamma_hc*Hc.rc
dD.rc = gamma_hc*Hc.rc*crit_die[2]
dR.rc = (1-hosp_frac[2])*gamma_s*Is.rc + gamma_a*Ia.rc + (1-sensitivity)*test.switch2*gamma_hs*Hs.rc +
(1-sensitivity)*test.switch2*gamma_hc*Hc.rc*(1-crit_die[2])  - sensitivity*test.rc*test.switch2*R.rc+
gamma_hc*test.switch1*Hc.rc*(1-crit_die[2])+test.switch1*gamma_hs*Hs.rc
dS.rc.pos = (1-specificity)*test.rc*test.switch2*S.rc - foi.rc.pos*S.rc.pos
dE.rc.pos = (1-specificity)*test.rc*test.switch2*E.rc + foi.rc.pos*S.rc.pos - gamma_e*E.rc.pos
dIs.rc.pos = gamma_e*E.rc.pos*p - gamma_s*Is.rc.pos
dIa.rc.pos = (1-specificity)*test.rc*test.switch2*Ia.rc + gamma_e*E.rc.pos*(1-p) - gamma_a*Ia.rc.pos
dR.rc.pos = sensitivity*test.rc*test.switch2*R.rc + sensitivity*test.switch2*gamma_hc*Hc.rc*(1-crit_die[2]) + sensitivity*test.switch2*gamma_hs*Hs.rc +
(1-hosp_frac[2])*gamma_s*Is.rc.pos + gamma_a*Ia.rc.pos
dS.fc = - foi.fc.gen*S.fc - (1-specificity)*test.fc*test.switch2*S.fc
dE.fc = foi.fc.gen*S.fc - gamma_e*E.fc - (1-specificity)*test.fc*test.switch2*E.fc
dIs.fc = gamma_e*E.fc*p - gamma_s*Is.fc
dIa.fc = gamma_e*E.fc*(1-p) - gamma_a*Ia.fc - (1-specificity)*test.fc*test.switch2*Ia.fc
dHs.fc = gamma_s*Is.fc*(hosp_frac[2]-hosp_crit[2]) + gamma_s*Is.fc.pos*(hosp_frac[2]-hosp_crit[2]) - gamma_hs*Hs.fc
dHc.fc = gamma_s*Is.fc*hosp_crit[2] + gamma_s*Is.fc.pos*hosp_crit[2]- gamma_hc*Hc.fc
dD.fc = gamma_hc*Hc.fc*crit_die[2]
dR.fc = (1-hosp_frac[2])*gamma_s*Is.fc + gamma_a*Ia.fc + (1-sensitivity)*test.switch2*gamma_hs*Hs.fc +
(1-sensitivity)*test.switch2*gamma_hc*Hc.fc*(1-crit_die[2])  - sensitivity*test.fc*test.switch2*R.fc +
gamma_hc*test.switch1*Hc.fc*(1-crit_die[2])+test.switch1*gamma_hs*Hs.fc
dS.fc.pos = (1-specificity)*test.fc*test.switch2*S.fc - foi.fc.pos*S.fc.pos
dE.fc.pos = (1-specificity)*test.fc*test.switch2*E.fc + foi.fc.pos*S.fc.pos - gamma_e*E.fc.pos
dIs.fc.pos = gamma_e*E.fc.pos*p - gamma_s*Is.fc.pos
dIa.fc.pos = (1-specificity)*test.fc*test.switch2*Ia.fc + gamma_e*E.fc.pos*(1-p) - gamma_a*Ia.fc.pos
dR.fc.pos = sensitivity*test.fc*test.switch2*R.fc + sensitivity*test.switch2*gamma_hc*Hc.fc*(1-crit_die[2]) + sensitivity*test.switch2*gamma_hs*Hs.fc +
(1-hosp_frac[2])*gamma_s*Is.fc.pos + gamma_a*Ia.fc.pos
dS.e = - foi.e.gen*S.e - (1-specificity)*test.e*test.switch2*S.e
dE.e = foi.e.gen*S.e - gamma_e*E.e - (1-specificity)*test.e*test.switch2*E.e
dIs.e = gamma_e*E.e*p - gamma_s*Is.e
dIa.e = gamma_e*E.e*(1-p) - gamma_a*Ia.e - (1-specificity)*test.e*test.switch2*Ia.e
dHs.e = gamma_s*Is.e*(hosp_frac[3]-hosp_crit[3]) + gamma_s*Is.e.pos*(hosp_frac[3]-hosp_crit[3]) - gamma_hs*Hs.e
dHc.e = gamma_s*Is.e*hosp_crit[3] + gamma_s*Is.e.pos*hosp_crit[3]- gamma_hc*Hc.e
dD.e = gamma_hc*Hc.e*crit_die[3]
dR.e = (1-hosp_frac[3])*gamma_s*Is.e + gamma_a*Ia.e + (1-sensitivity)*test.switch2*gamma_hs*Hs.e +
(1-sensitivity)*test.switch2*gamma_hc*Hc.e*(1-crit_die[3])  - sensitivity*test.e*test.switch2*R.e+
gamma_hc*test.switch1*Hc.e*(1-crit_die[3])+test.switch1*gamma_hs*Hs.e
dS.e.pos = (1-specificity)*test.e*test.switch2*S.e - foi.e.pos*S.e.pos
dE.e.pos = (1-specificity)*test.e*test.switch2*E.e + foi.e.pos*S.e.pos - gamma_e*E.e.pos
dIs.e.pos = gamma_e*E.e.pos*p - gamma_s*Is.e.pos
dIa.e.pos = (1-specificity)*test.e*test.switch2*Ia.e + gamma_e*E.e.pos*(1-p) - gamma_a*Ia.e.pos
dR.e.pos = sensitivity*test.e*test.switch2*R.e + sensitivity*gamma_hc*test.switch2*Hc.e*(1-crit_die[3]) + sensitivity*gamma_hs*test.switch2*Hs.e +
(1-hosp_frac[3])*gamma_s*Is.e.pos + gamma_a*Ia.e.pos
res = c(dS.c, dE.c, dIs.c, dIa.c, dHs.c, dHc.c, dD.c, dR.c, dS.c.pos, dE.c.pos, dIs.c.pos, dIa.c.pos, dR.c.pos,
dS.a, dE.a, dIs.a, dIa.a, dHs.a, dHc.a, dD.a, dR.a, dS.a.pos, dE.a.pos, dIs.a.pos, dIa.a.pos, dR.a.pos,
dS.rc, dE.rc, dIs.rc, dIa.rc, dHs.rc, dHc.rc, dD.rc, dR.rc,
dS.rc.pos, dE.rc.pos, dIs.rc.pos, dIa.rc.pos, dR.rc.pos,
dS.fc, dE.fc, dIs.fc, dIa.fc, dHs.fc, dHc.fc, dD.fc, dR.fc,
dS.fc.pos, dE.fc.pos, dIs.fc.pos, dIa.fc.pos, dR.fc.pos,
dS.e, dE.e, dIs.e, dIa.e, dHs.e, dHc.e, dD.e, dR.e, dS.c.pos, dE.e.pos, dIs.e.pos, dIa.e.pos, dR.e.pos)
list(res)
}
#Model parameters
# Population
N=323*10^6
agefrac.0=c(0.12,0.13,0.13,0.13,0.13,0.13,0.11,0.06,0.04,0.02) # from Weitz model
agestruc=c(sum(agefrac.0[1:2]), sum(agefrac.0[3:6], 0.5*agefrac.0[7]),
sum(0.5*agefrac.0[7], agefrac.0[8:10]))
#Initial matrices
#3x3 data from Prem et al
AllContacts<-matrix(data=c(9.75, 2.57, 0.82, 5.97, 10.32, 2.25, 0.39, 0.46, 1.20), nrow=3)
WorkContacts<-matrix(data=c(0.20, 0.28, 0, 0.64, 4.73, 0, 0, 0, 0), nrow=3)
SchoolContacts<-matrix(data=c(4.32, 0.47, 0.02, 1.10, 0.32, 0.04, 0.01, 0.01, 0.03), nrow=3)
HomeContacts<-matrix(data=c(2.03, 1.02, 0.50, 2.37, 1.82, 0.68, 0.24, 0.14, 0.62), nrow=3)
OtherContacts<-matrix(data=c(3.20, 0.80, 0.30, 1.86, 3.45, 1.53, 0.14, 0.32, 0.55), nrow=3)
#Expand the 3x3 matrix to a 5x5 based on the fraction of the population in each of the worker
#subgroups
expand_5x5<-function(oldmatrix, phome, preduced, pfull){
newmatrix<-matrix(NA, ncol=5, nrow=5)
newmatrix[1,1]<-oldmatrix[1,1]
newmatrix[2:4,1]<-oldmatrix[2,1]
newmatrix[5,1]<-oldmatrix[3,1]
newmatrix[1,5]<-oldmatrix[1,3]
newmatrix[2:4,5]<-oldmatrix[2,3]
newmatrix[5,5]<-oldmatrix[3,3]
vec1<-c(oldmatrix[1,2]*phome, oldmatrix[1,2]*preduced, oldmatrix[1,2]*pfull)
newmatrix[1,2:4]<-vec1
vec2<-c(oldmatrix[2,2]*phome, oldmatrix[2,2]*preduced, oldmatrix[2,2]*pfull)
newmatrix[2,2:4]<-vec2
newmatrix[3,2:4]<-vec2
newmatrix[4,2:4]<-vec2
vec3<-c(oldmatrix[3,2]*phome, oldmatrix[3,2]*preduced, oldmatrix[3,2]*pfull)
newmatrix[5,2:4]<-vec3
newmatrix
}
prob.home<-0.316
#prob.home<-0.4
prob.full<-0.0565
prob.reduced<-1-prob.full-prob.home
#prob.reduced<-0.678
preduced<-0.5
pfull<-1
sd.other<-0.25
alpha<-1.2
WorkContacts_5x5<-expand_5x5(oldmatrix=WorkContacts,
phome=prob.home, preduced=prob.reduced, pfull=prob.full)
HomeContacts_5x5<-expand_5x5(oldmatrix=HomeContacts,
phome=prob.home, preduced=prob.reduced, pfull=prob.full)
SchoolContacts_5x5<-expand_5x5(oldmatrix=SchoolContacts,
phome=prob.home, preduced=prob.reduced, pfull=prob.full)
OtherContacts_5x5<-expand_5x5(oldmatrix=OtherContacts,
phome=prob.home, preduced=prob.reduced, pfull=prob.full)
#Note on R0: with base structure 47.28q=R0
#Old latent period: 44.895q
#New latent period: 63.28q
R0=3.2
q=R0/65.95  #probability of transmission from children
asymp.red=0.55 #relative infectiousness of asymptomatic infections compared to
#symptomatic infections
# Natural History Parameters
gamma_e=1/3     # Latent period (He et al)
gamma_a=1/7     # Recovery rate, undocumented (Kissler et al)
gamma_s=1/7    # Recovery rate, undocumented (Kissler et al)
gamma_hs=1/5    # Recovery rate, hospitalized cases (Zhou et al--China study)
gamma_hc=1/7
#pars$p=c(0.99, 0.99, 0.95, 0.9, 0.8, 0.7, 0.6, 0.5, 0.5, 0.5) # Structured, from Weitz model
#beta_a=2.5/10   # Transmission for asymptomatic # from Weitz model
#beta_s=5/10     # Transmission for symptomatic # from Weitz model
#Ferguson parameters
hosp_frac<-c(0.002, 0.056, 0.224) #Ferguson
hosp_crit<-c(0.001, 0.0048, 0.099) #Ferguson
p=0.50
R0=3.1
q=R0/79.27
#hosp_crit<-c(0.05, 0.085, 0) #Artificial, to check
#MMWR Parameters
#hosp_frac=c(0.061, 0.182, 0.417) #From MMWR
#hosp_crit=c(0, 0.063, 0.173) #From CDC, MMWR
#p=0.20 #Based on Li et al
#R0=2.9
#q=R0/65.948
crit_die=c(0, 0.5, 0.5) #Averaged from Ferguson
##TESTING
#For Cellex
sensitivity=1.00
specificity=0.998
testvec<-rep(0, 366)
times <- seq(0, 365, length = 366)
#Initial conditions
initcase.c=60
initcase.a=20
initcase.e=40
initcase.rc=50
initcase.fc=1
# base model
start = c(S.c = agestruc[1]*N - initcase.c, E.c = 0, Is.c = initcase.c, Ia.c = 0, Hs.c = 0, Hc.c = 0, D.c = 0, R.c = 0,
S.c.pos = 0, E.c.pos = 0, Is.c.pos = 0, Ia.c.pos = 0, R.c.pos =0,
S.a = agestruc[2]*N*prob.home - initcase.a, E.a = 0, Is.a = initcase.a, Ia.a = 0, Hs.a = 0, Hc.a = 0, D.a = 0, R.a = 0,
S.a.pos = 0, E.a.pos = 0, Is.a.pos = 0, Ia.a.pos = 0, R.a.pos =0,
S.rc = agestruc[2]*N*prob.reduced-initcase.rc, E.rc = 0, Is.rc = initcase.rc, Ia.rc = 0, Hs.rc = 0, Hc.rc = 0, D.rc = 0, R.rc = 0,
S.rc.pos = 0, E.rc.pos = 0, Is.rc.pos = 0, Ia.rc.pos = 0, R.rc.pos =0,
S.fc = agestruc[2]*N*prob.full-initcase.fc, E.fc = 0, Is.fc = initcase.fc, Ia.fc = 0, Hs.fc = 0, Hc.fc = 0, D.fc = 0, R.fc = 0,
S.fc.pos = 0, E.fc.pos = 0, Is.fc.pos = 0, Ia.fc.pos = 0, R.fc.pos =0,
S.e = agestruc[3]*N - initcase.e, E.e = 0, Is.e = initcase.e, Ia.e = 0, Hs.e = 0, Hc.e= 0, D.e = 0, R.e = 0,
S.e.pos = 0, E.e.pos = 0, Is.e.pos = 0, Ia.e.pos = 0, R.e.pos =0)
t = (0:365)
#t = (0:364)
#Scenarios
#Do nothing
start.time.distance<-500
#SD
sd.other<-0.25
preduced<-0.1
sd.other2<-sd.other
preduced2<-preduced
start.time.test<-500 #can change when in the outbreak testing becomes available
start.time.target<-500
time.reopen<-500
times <- seq(0, 365, length = 366)
daily.tests<-0
school.start.time<-500
#Might want a ramp up period for these, ignore for now
tswitch1.dat<-data.frame(times=times, test.switch1=c(rep(1, 366)))
tswitch2.dat<-data.frame(times=times, test.switch2=c(rep(0, 366)))
#tswitch1.dat<-data.frame(times=times, test.switch1=c(rep(1, start.time.test+1),
#                                                     rep(0, length(times)-(start.time.test+1))))
#tswitch2.dat<-data.frame(times=times, test.switch2=c(rep(0, start.time.test+1),
#                                                     rep(1, length(times)-(start.time.test+1))))
sw1fxn<-approxfun(tswitch1.dat$times, tswitch1.dat$test.switch1, rule=2)
sw2fxn<-approxfun(tswitch2.dat$times, tswitch2.dat$test.switch2, rule=2)
params = c('agestruc'=agestruc,
'HomeContacts_5x5'=HomeContacts_5x5, 'WorkContacts_5x5'=WorkContacts_5x5, 'SchoolContacts_5x5'=SchoolContacts_5x5,
'OtherContacts_5x5'=OtherContacts_5x5,
'preduced'=preduced, 'pfull'=pfull, 'sd.other'=sd.other,
'preduced2'=preduced, 'sd.other2'=sd.other,
'alpha'=alpha, 'daily.tests'=daily.tests,
'start.time.distance'=start.time.distance,
'time.reopen'=time.reopen,
'start.time.target'=start.time.target,
'school.start.time'=school.start.time,
'gamma_e'=gamma_e, 'gamma_a'=gamma_a, 'gamma_s'=gamma_s, 'gamma_hs'=gamma_hs, 'gamma_hc'=gamma_hc,
'p'=p, 'hosp_frac'=hosp_frac, 'hosp_crit'=hosp_crit, 'crit_die'=crit_die,
'sensitivity'=sensitivity, 'specificity'=specificity)
model_out = ode(y = start, times = t, fun = seir_model_shields_rcfc_nolatent, parms = par,
method='ode45')
model_out<-as.data.frame(model_out)
Infected<-N-sum(model_out$S.c[366], model_out$S.c.pos[366], model_out$S.a[366], model_out$S.a.pos[366],
model_out$S.rc[366], model_out$S.rc.pos[366], model_out$S.fc[366], model_out$S.fc.pos[366],
model_out$S.e[366], model_out$S.e.pos[366])
Pinfect<-Infected/N
Infected; Pinfect
model_out[366,]
model_out[366,order(colnames(model_out))]
test = model_out[366,order(colnames(model_out))]; save(test, file='derp.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
model_out[366, order(colnames(model_out))]
load('derp.R')
model_out[366, order(colnames(model_out))] - test
max(model_out[366, order(colnames(model_out))] - test)
pars_doNothing$S_ids
pars_doNothing$S_pos_ids
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
model_out[366,]
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
Infected; Pinfect
pars$t
pars$time
names(pars)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
names(pars)
pars_doNothing$times
Deaths=sum(model_out[366, pars_doNothing$D_ids])
Deaths
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/reorg/run_main.R')
clear
restart
m
rm(list=ls())
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
target(3)
target(-1
)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
plot(target[1:5])
plot(target(1:5))
plot(1:5,target(1:5))
plot(data.frame(1:5, target(1:5)))
plot(x)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
prior = function(p){
return(ifelse(p<0||p>1, 0, 1))
}
prior(1)
prior(0.9)
prior(1.1)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
z
hist(z[[1]])
z$f
hist(z$f)
hist(z$p)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
hist(z$f)
hist(z$p)
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
hist(z$f)
hist(z$p)
hist(z$f[5000:10000])
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/MCMC test.R')
