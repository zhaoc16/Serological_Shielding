, plot.margin = margin(20,20,10,10, 'pt')) +
facet_wrap('scenario', scales = 'free', nrow = 1)
ggplot(melt_y, aes(x = time, y = popfrac, color = class)) +
geom_line(size = 1.2) +
xlab('Time (days)') +
ylab('Population Fraction')
y the best-fit exponential
ggplot(df.res, aes(x = time)) +
geom_point(aes(y = I, color = time<11), size = 4, shape = 1) +
geom_line(aes(y = I_fit), color = 'red', size = 2) +
scale_color_manual(values = c('blue', 'black')) +
scale_x_continuous(expand = c(0,0), limits = c(0,30)) +
scale_y_log10() +
xlab('Time (days)') +
ylab('Infectious Fraction') +
theme(legend.position = 'none'
, aspect.ratio = 1
, plot.margin = margin(20,20,10,10, 'pt')) +
facet_wrap('scenario', scales = 'free', nrow = 1)
source('C:/Users/czhao/Desktop/Day of Workshop Coding.R')
require(readxl)
rm(list=ls())
# Load --------------------------------------------------------------------
require(Matrix)
pars['A'] = forceSymmetric(Matrix(rnorm(N^2, N)))
pars['A'] = forceSymmetric(Matrix(rnorm(pars$N^2, pars$N)))
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars['A'] = forceSymmetric(Matrix(rnorm(pars$N^2), pars$N))
pars['A']
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars['A']
diag(pars['A']) = -1
temp.A = forceSymmetric(Matrix(rnorm(pars$N^2), pars$N))
diag(temp.A) = -1
pars['A'] = temp.A
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars['A']
set.seed(1234)
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
temp.A
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
temp.A
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
temp.A
diag(pars['R'])
pars$R
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars['N'] = 10 # number of otus
pars['R'] = rep(1, pars$N) # doublings per hour
pars$R
rep(1, pars$N)
pars['N'] = 10 # number of otus
pars['R'] = rep(1, pars$N) # doublings per hour
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
# Set Parameters ----------------------------------------------------------
pars = list()
pars[['N']] = 10 # number of otus
pars[['R']] = rep(1, pars$N) # doublings per hour
pars[['K']] = rep(1, pars$N) # this doesn't make sense. Change it to a global carrying capacity later.
set.seed(1234)
temp.rands = rnorm(pars$N^2) # can change distribution later.
temp.A = Matrix(temp.rands, pars$N)
diag(temp.A) = -1
pars[['A']] = temp.A
pars[['t']] = 100 # hours
# Baseline:
pars$R
pars$K
pars$K^-1
pars$K = pars$K + 1:10
pars$K^-1
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
require(deSolve)
runif()
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
require(ellipsis)
install.packages('ellipsis')
require(ellipsis)
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
runif(3)
runif(100)
pars[['N0s']] = Matrix(runif(pars$N^3), pars$N)
pars$N0s
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
# Sim Odes ----------------------------------------------------------------
test = ode(pars$N0s[,1], 1:pars$t, GLV_sim, pars)
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars$N0s[,1]
diag(pars$N0s[,1])
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
# Sim Odes ----------------------------------------------------------------
test = ode(y = pars$N0s[,1], times = 1:pars$t, GLV_sim, pars)
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars$A %*% pars[['N0s']][,1
]
pars$A %*% pars[['N0s']][,1]
.11*.88 + .62*-1.45 + .6*-.35
pars[['N0s']][,1]
pars$A
-1*.11 + -2.34*.6 + -.5*.66
-1*.11 + -2.34*.6 + -.5*.60
-1*.11 + -2.34*.6 + -.57*.60
-1*.11 + -2.34*.62 + -.57*.60
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
test
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
test
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
pars
test[nrow(test),]
derp = test[nrow(test),-1]
derp
pars$A %*% derp
temp.test = apply(pars$N0s, 1, function(x){
res = ode(y = pars$N0s[,1], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])}
}
test =
temp.test = apply(pars$N0s, 1, function(x){
res = ode(y = pars$N0s[,1], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
})
temp.test
pars$N0s
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
temp.test
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
temp.test
require(parallel)
remove('parallel')
remove.packages('parallel')
require(parallel)
detach('package:parallel', unload = TRUE)
# parallelized
cl = makeCluster(7)
registerDoParallel(cl)
foreach(i = 1:pars$N^2) %do% {
res = ode(y = pars$N0s[,i], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
}
stopCluster(cl)
require(foreach)
require(doParallel)
# parallelized
cl = makeCluster(7)
registerDoParallel(cl)
foreach(i = 1:pars$N^2) %do% {
res = ode(y = pars$N0s[,i], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
}
stopCluster(cl)
foreach(i = 1:pars$N^2, .combine = 'rbind') %do% {
res = ode(y = pars$N0s[,i], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
}
df.res = as.data.frame(t(temp.test_par), stringsAsFactors = F)
temp.test_par = foreach(i = 1:pars$N^2, .combine = 'rbind') %do% {
res = ode(y = pars$N0s[,i], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
}
df.res = as.data.frame(t(temp.test_par), stringsAsFactors = F)
cl = makeCluster(7)
registerDoParallel(cl)
temp.test_par = foreach(i = 1:pars$N^2, .combine = 'rbind') %do% {
res = ode(y = pars$N0s[,i], times = ts, GLV_sim, pars)
return(res[nrow(res),-1])
}
stopCluster(cl)
df.res = as.data.frame(t(temp.test_par), stringsAsFactors = F)
require(doParallel)
# parallelized
cl = makeCluster(7)
cl
source('C:/Users/czhao/Desktop/Generating Microbiome-like Data/05-26-2020_Generating_Microboime-like_Data.R')
install.packages('parallel')
install.packages("parallel")
require(Rtools)
install.packages('Rtools')
library(parallel)
sessionInfo(0)
sessionInfo()
install.packages('installr')
reuqire(installr)
updateR()
require(installr)
updateR()
updateR()
require(readxl)
derp = list(1, 1:2, 2)
derp
derp[c(T, F, T)]
derp[[T, F, T]]
derp[[c(T, F, T)]]
isntall.packages('rethinking')
install.packages('rethinking')
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages(c('fs', 'usethis'))
install.packages('memoise')
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages('callr')
require(evtools)
require(devtools)
install.packages('processx')
require(devtools)
require(devtools)
install.packages('devtools')
install.packages('Rtools')
require(rethinking)
install.packages('rstan')
require(rethinking)
install.packages('inline')
require(rethinking)
install.packages('rstan')
require(rethinking)
install
require('rstan')
install.packages('rethinking')
require(rethinking)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages('backports')
install.packages("backports")
devtools::install_github("rmcelreath/rethinking")
devtools::install_github("rmcelreath/rethinking")
require(rethinking)
install.packages('reshape2')
install.packages("phyloseq")
require(rethinking)
data("reedfrogs")
d = reedfrogs
str(d)
View(d)
d$tank = 1:nrow(d)
dat = list(S = d$surv, N = d$density, tank = d$tank)
dat
m13.1 = ulam(alist(S~dbinom(N,p),
logit(p) = a[tank],
a[tank] ~ dnorm(0, 1.5)
), data=dat, chains=4, log_lik=TRUE)
m13.1 = ulam(alist(S~dbinom(N,p), logit(p) = a[tank], a[tank] ~ dnorm(0, 1.5)), data=dat, chains=4, log_lik=TRUE)
m13.1 = ulam(alist(S~dbinom(N,p)
, logit(p) = a[tank]
, a[tank] ~ dnorm(0, 1.5))
, data=dat, chains=4, log_lik=TRUE)
m13.1 = ulam(alist(S~dbinom(N,p)
, logit(p) = a[tank]
, a[tank] ~ dnorm(0, 1.5))
, data=dat, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(S~dbinom(N,p)
, logit(p) = a[tank]
, a[tank] ~ dnorm(0, 1.5))
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S~dbinom(N,p)
, logit(p) = a[tank]
, a[tank] ~ dnorm(0, 1.5))
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S ~ dbinom(N,p),
logit(p) = a[tank],
a[tank] ~ dnorm(0, 1.5)
)
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S ~ dbinom(N,p),
logit(p) = a[tank],
a[tank] ~ dnorm(0, 1.5)
)
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S ~ dbinom(N,p),
logit(p) = a[tank],
a[tank] ~ dnorm(0, 1.5)
)
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S ~ dbinom(N,p),
logit(p) <= a[tank],
a[tank] ~ dnorm(0, 1.5)
)
, data=dat
, chains=4
, log_lik=TRUE)
m13.1 = ulam(alist(
S ~ dbinom(N,p),
logit(p) <- a[tank],
a[tank] ~ dnorm(0, 1.5)
)
, data=dat
, chains=4
, log_lik=TRUE)
precis(m13.1, depth=2)
m13.2 = ulam(
alist(
S~dbinom(N,P),
logit(p) <- a[tank],
a[tank] ~ dnorm(a_bar, sigma),
a_bar ~ dnorm(0,1.5),
sigma ~ dexp(1)
), data=dat, chains=4, log_lik=TRUE
)
m13.2 = ulam(
alist(
S~dbinom(N,p),
logit(p) <- a[tank],
a[tank] ~ dnorm(a_bar, sigma),
a_bar ~ dnorm(0,1.5),
sigma ~ dexp(1)
), data=dat, chains=4, log_lik=TRUE
)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
restart
uninstall('StanHeaders')
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages('StanHeaders')
install.packages(
"https://win-builder.r-project.org/9ziTrYx8Be28/StanHeaders_2.21.0-6.zip",
repos = NULL, type = "win.binary")
install.packages(
"https://win-builder.r-project.org/NSucX8f7MS6s/rstan_2.21.2.zip",
repos = NULL, type = "win.binary")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages('StanHeaders')
install.packages(
"https://win-builder.r-project.org/gdaEAY9p8V7I/StanHeaders_2.21.0-6.zip",
repos = NULL, type = "win.binary")
install.packages(
"https://win-builder.r-project.org/iT79L894j228/rstan_2.21.2.zip",
repos = NULL, type = "win.binary")
CXX14FLAGS=-O3 -mtune=native -mmmx -msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
file.edit("~/.R/Makevars.win")
getwd
getwd(0)
getwd()
setwd('CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/')
ls
ls.dir
list.dirs()
setwd('Serological_Shielding/')
ls
setwd('Learning_MCMCs/')
require(rstan)
# options(mc.cores = parallel::detectCores())
# rstan_options(auto_write = TRUE)
# Sys.setenv(LOCAL_CPPFLAGS = '-march=native -mtune=native')
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = 'schools.stan', data = schools_dat)
print(fit)
plot(fit)
pairs(fit, pars = c("mu", "tau", "lp__"))
la <- extract(fit, permuted = TRUE) # return a list of arrays
mu <- la$mu
### return an array of three dimensions: iterations, chains, parameters
a <- extract(fit, permuted = FALSE)
### use S3 functions on stanfit objects
a2 <- as.array(fit)
m <- as.matrix(fit)
a2
m
d
d
d <- as.data.frame(fit)
head(d)
y <- as.matrix(read.table('https://raw.github.com/wiki/stan-dev/rstan/rats.txt', header = TRUE))
x <- c(8, 15, 22, 29, 36)
xbar <- mean(x)
N <- nrow(y)
T <- ncol(y)
rats_fit <- stan('https://raw.githubusercontent.com/stan-dev/example-models/master/bugs_examples/vol1/rats/rats.stan')
y <- as.matrix(read.table('rats.txt', header = TRUE))
x <- c(8, 15, 22, 29, 36)
xbar <- mean(x)
N <- nrow(y)
T <- ncol(y)
rats_fit <- stan('rats.stan')
source('~/CYZ GITHUB/Weitz Group/COVID-19/Lopman COVID collab/Serological_Shielding/Learning_MCMCs/test_mcmcpack.R')
logitfun <- function(beta){
eta <- X %*% beta
p <- 1.0/(1.0+exp(-eta))
sum( y * log(p) + (1-y)*log(1-p) )
}
x1 <- rnorm(1000)
x2 <- rnorm(1000)
Xdata <- cbind(1,x1,x2)
p <- exp(.5 - x1 + x2)/(1+exp(.5 - x1 + x2))
yvector <- rbinom(1000, 1, p)
yvector
post.samp <- MCMCmetrop1R(logitfun, theta.init=c(0,0,0),
X=Xdata, y=yvector,
thin=1, mcmc=40000, burnin=500,
tune=c(1.5, 1.5, 1.5),
verbose=TRUE, logfun=TRUE, optim.maxit=100)
?MCMCmetrop1R
X=Xdata
y=yvector
post.samp <- MCMCmetrop1R(logitfun
, theta.init=c(0,0,0)
, thin=1
, mcmc=40000
, burnin=500
, tune=c(1.5, 1.5, 1.5)
, verbose=TRUE
, logfun=TRUE
, optim.maxit=100)
## logistic regression with an improper uniform prior
## X and y are now in the global environment
.
logitfun <- function(beta){
eta <- X %*% beta
p <- 1.0/(1.0+exp(-eta))
sum( y * log(p) + (1-y)*log(1-p) )
}
x1 <- rnorm(1000)
x2 <- rnorm(1000)
X <- cbind(1,x1,x2)
p <- exp(.5 - x1 + x2)/(1+exp(.5 - x1 + x2))
y <- rbinom(1000, 1, p)
post.samp <- MCMCmetrop1R(logitfun, theta.init=c(0,0,0),
thin=1, mcmc=40000, burnin=500,
tune=c(1.5, 1.5, 1.5),
verbose=TRUE, logfun=TRUE)
raftery.diag(post.samp)
plot(post.samp)
summary(post.samp)
